/*Propiedades sprite de pruebawidth = 196height = 168widthFrame = 28heightFrame = 42*/// Acciones del personaje principalvar CHARACTER_WALK_NORTH = 0,CHARACTER_WALK_EAST = 1,CHARACTER_WALK_SOUTH = 2,CHARACTER_WALK_WEST = 3,CHARACTER_STILL = - 1;// Configuración arreglo de acciones para personaje principalvar arrayPrincipal = [42, 84, 0, 126];/**/function Character(src, x, y, z, widthFrame, heightFrame, numRows, numColums, velocity, xsd, ysd, widthStage, heightStage, widthCh, heightCh, update, arraySprite){   // Constructor de la clase padre   Entity.call(this, x, y, z, update);   this.xInit = x;   this.yInit = y;   this.image = new Image();   this.image.src = src;   this.widthFrame = widthFrame;   this.heightFrame = heightFrame;   this.numRows = numRows;   this.numColums = numColums;   // posición inicial   this.xPositionOnSprite = 0;   this.yPositionOnSprite = 0;   // variables para controlar velocidad del personaje   this.velocityFactor = velocity;   this.velocity = velocity;   // máximos del Sprite   this.maxWitdhtSprite = widthFrame * numColums - widthFrame;   this.maxHeighttSprite = heightFrame * numRows - heightFrame;   // m‡ximos ancho y alto   this.maxWStage = widthStage - widthCh;   this.maxWStage = this.maxWStage % xsd == 0 ? this.maxWStage : this.maxWStage - (this.maxWStage % xsd);   this.maxHStage = heightStage - heightCh;   this.maxHStage = this.maxHStage % ysd == 0 ? this.maxHStage : this.maxHStage - (this.maxHStage % ysd);   // valor desplazamiento de los ejex x y x para el personaje   this.xsd = xsd;   this.ysd = ysd;   // Ancho y alto del personaje a pintar. Independiente del tamaño de la imagen   this.widthCh = widthCh;   this.heightCh = heightCh;   // seteo arreglo de sprites   this.arraySprite = arraySprite;   this.draw = function (context)   {      context.drawImage(this.image, this.xPositionOnSprite, this.yPositionOnSprite, this.widthFrame, this.heightFrame, this.x, this.y, this.widthCh, this.heightCh);      this.drawCoordinates(context);   }   this.update = function ()   {      this.move(action_character);   }   /* se desplaza por una imagen   */   this.move = function(action)   {            this.animationSprite(action);      if (limitStageX !== NONE || limitStageY !== NONE)      {         if ((action == CHARACTER_WALK_EAST || action == CHARACTER_WALK_WEST) && limitStageX !== NONE)         {            this.advance(action);            if (this.x == this.xInit)            {               limitStageX = NONE;            }         }         if ((action == CHARACTER_WALK_NORTH || action == CHARACTER_WALK_SOUTH) && limitStageY !== NONE)         {            this.advance(action);            if (this.y == this.yInit)            {               limitStageY = NONE;            }         }      }   }   this.animationSprite = function(action)   {      if (action !== CHARACTER_STILL)      {         if (this.velocityFactor % this.velocity == 0)         {            if ((this.xPositionOnSprite + this.widthFrame) <= (this.maxWitdhtSprite))            {               this.xPositionOnSprite += this.widthFrame;            }            else            {               this.xPositionOnSprite = 0;            }            this.velocityFactor = 1;         }         else         {            this.velocityFactor += 1;         }         this.yPositionOnSprite = arraySprite[action];      }   }   this.advance = function(direction)   {      switch (direction)      {         case CHARACTER_WALK_NORTH :            if ((this.y - this.ysd) >= 0)            {               this.y -= this.ysd;            }            else            {               this.y = 0;            }            break;         case CHARACTER_WALK_EAST :            if ((this.x + this.xsd) <= (this.maxWStage - this.xsd))            {               this.x += this.ysd;            }            else            {               this.x = this.maxWStage;            }            break;         case CHARACTER_WALK_SOUTH :            if ((this.y + this.ysd) <= (this.maxHStage - this.ysd))            {               this.y += this.ysd;            }            else            {               this.y = this.maxHStage;            }            break;         case CHARACTER_WALK_WEST :            if ((this.x - this.xsd) >= 0)            {               this.x -= this.xsd;            }            else            {               this.x = 0;            }            break;         default :            break;      }   }   this.drawCoordinates = function (context)   {      context.save();      context.fillStyle = 'rgb(255,255,255)';      context.font = 'bold 10px sans-serif';      context.fillText('x,y/lX,lY: ' + this.x + ',' + this.y + '/' + limitStageX + ',' + limitStageY, 10, 25);      context.restore();   }}// Extiendo de EntityCharacter.prototype = new Entity();