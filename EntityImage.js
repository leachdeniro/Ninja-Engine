/*La variable direction_scrolling, es externa porque responde a un evento externo al objeto. Los valores que soporta están definidosen la clase EntiyImageBase valores(NORTH, EAST, SOUTH, WEST, NONE). */function EntityImage(src, x, y, z, widthScroll, heightScroll, xs, ys, xsd, ysd, widthStage, heightStage){   // Constructor de la clase padre   EntityImageBase.call(this, src, x, y, z, widthScroll, heightScroll, xs, ys, xsd, ysd, widthStage, heightStage);   this.north = false;   this.east = false;   this.south = false;   this.west = false;   this.none = true;   this.update = function ()   {      var xscroll = this.xScroll;      var yscroll = this.yScroll;      var xplano = X_PLANO;      var yplano = Y_PLANO;      if (xor(this.east,this.west) && limitStageX == NONE )      {         this.move(1);      }      if (xor(this.north,this.south) && limitStageY == NONE )      {         this.move(2);      }      X_PLANO = this.xScroll;      Y_PLANO = this.yScroll;      // Chequeo la colisión del personaje principal      var xins = PERSONAJE_PRINCIPAL.x + (X_PLANO - xplano);      var yins = PERSONAJE_PRINCIPAL.y + (Y_PLANO - yplano);      if (isCollision(xins, yins, PERSONAJE_PRINCIPAL.ws, PERSONAJE_PRINCIPAL.hs, etapa2))      {         this.xScroll = xscroll;         this.yScroll = yscroll;         X_PLANO = xplano;         Y_PLANO = yplano;      }   }   this.draw = function(context)   {      // Invoco al método draw del padre      new EntityImageBase().draw.call(this, context);      // Pinto las coordenadas de desplazamiento dentro del fondo      this.drawCoordinates(context, 10, 35)   }   /* se desplaza por una imagen   */   this.move = function(type)   {      if (type == 2)      {         if (this.north)         {            if ((this.yScroll - this.yAxisd) >= 0)            {               this.yScroll -= this.yAxisd;            }            else            {               this.yScroll = 0;               limitStageY = NORTH;            }         }         if (this.south)         {            if ((this.yScroll + this.yAxisd) <= (this.maxHStage - this.yAxisd))            {               this.yScroll += this.yAxisd;            }            else            {               this.yScroll = this.maxHStage;               limitStageY = SOUTH;            }         }      }      else if (type == 1)      {         if (this.west)         {            if ((this.xScroll - this.xAxisd) >= 0)            {               this.xScroll -= this.xAxisd;            }            else            {               this.xScroll = 0;               limitStageX = WEST;            }         }         if (this.east)         {            if ((this.xScroll + this.xAxisd) <= (this.maxWStage - this.xAxisd))            {               this.xScroll += this.xAxisd;            }            else            {               this.xScroll = this.maxWStage;               limitStageX = EAST;            }         }      }   }   this.keyDown = function(event)   {      if (event.keyCode == 37 && ! this.west)      {         this.west = true;      }      if (event.keyCode == 38 && ! this.north)      {         this.north = true;      }      if (event.keyCode == 39 && ! this.east)      {         this.east = true;      }      if (event.keyCode == 40 && ! this.south)      {         this.south = true;      }   }   this.keyUp = function(event)   {      if (event.keyCode == 37)      {         this.west = false;      }      if (event.keyCode == 38)      {         this.north = false;      }      if (event.keyCode == 39)      {         this.east = false;      }      if (event.keyCode == 40)      {         this.south = false;      }   }}// Extiendo de EntityEntityImage.prototype = new EntityImageBase();/*Clase que pinta una imagen y funciona en relación a la imagen padre indicada por las coordenadas xs y ys. Debe funcionar con el fond primario, el "cero" del arreglo de imágenes del escenario. Los valores de xsd y ysd deben coincidir con los del padre. La imagenqueda fina en una posición en relación al padre. */function EntityImageChild(src, x, y, z, father, widthImage, heightImage){   // Constructor de la clase padre   Entity.call(this, x, y, z);   this.image = new Image();   this.image.src = src;   this.x -= father.xsFather;   this.y -= father.ysFather;   this.xsdFather = father.xsdFather;   this.ysdFather = father.ysdFather;   this.widthImage = widthImage;   this.heightImage = heightImage;   this.update = function()   {      switch (direction_scrolling)      {         case NORTH :            if (limitStageY == NONE)            {               this.y += this.ysdFather;            }            break;         case EAST :            if (limitStageX == NONE)            {               this.x -= this.xsdFather;            }            break;         case SOUTH :            if (limitStageY == NONE)            {               this.y -= this.ysdFather;            }            break;         case WEST :            if (limitStageX == NONE)            {               this.x += this.xsdFather;            }            break;         default :            break;      }   }   this.draw = function (context)   {      context.drawImage(this.image, this.x, this.y, this.widthImage, this.heightImage);   }}// Extiendo de EntityEntityImageChild.prototype = new Entity();function EntityImageChild2(src, x, y, z, widthImage, heightImage){   // Constructor de la clase padre   Entity.call(this, x, y, z);   this.image = new Image();   this.image.src = src;   this.widthImage = widthImage;   this.heightImage = heightImage;   this.xInit = x;   this.yInit = y;   this.x = this.xInit - X_PLANO;   this.y = this.yInit - Y_PLANO;   this.update = function()   {         this.x = this.xInit - X_PLANO;         this.y = this.yInit - Y_PLANO;   }   this.draw = function (context)   {      context.drawImage(this.image, this.x, this.y, this.widthImage, this.heightImage);   }}// Extiendo de EntityEntityImageChild2.prototype = new Entity();