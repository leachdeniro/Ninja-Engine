var direction_scrolling = NONE;var action_character = CHARACTER_STILL;var limitStageX = WEST;var limitStageY = NORTH;// var limitStageX = NONE;// var limitStageY = NONE;function GameManager(){   // this.imageManager = null;   this.stages = new StageManager();   this.initGameManager = function()   {      gameManager = this;      this.stages.addStage(this.loadFirstStage());      this.stages.addStage(this.loadSecondStage());            this.load = 0;      PLANO.numStage =1;      setInterval(function()      {         gameManager.render();      }      , 1000 / MAXFPS);      //                   this.render();      return this;   }   this.render = function()   {      // calculate the time since the last frame      var thisFrame = new Date().getTime();      var dt = (thisFrame - this.lastFrame) / 1000;      this.lastFrame = thisFrame;      dt = 1;      var stage = this.stages.getStage(PLANO.numStage - 1);      if (PLANO.numStage != this.load)      {        gameManager = this;         // Registro los eventos de teclado         document.onkeydown = function(event)         {            gameManager.registerKeyPressDown(event, stage.images);         }         document.onkeyup = function(event)         {            gameManager.registerKeyPressUp(event, stage.images);         }         this.load = PLANO.numStage;      }      // limpio los contextos canvas      bufferCtx.clearRect(0, 0, bufferCtx.width, bufferCtx.height);      ctx.clearRect(0, 0, canvas.width, canvas.height);      /* Actualizo los datos de las entidades */      for (i = 0; i < stage.images.length;      i ++ )      {         if (stage.images[i].update)         {            stage.images[i].update(dt);         }      }      /* Colisiones */      for(var i = 0; i < stage.images.length - 1;      i ++ )      {         for(var j = i + 1; j < stage.images.length;         j ++ )         {            var uno = stage.images[i];            var otro = stage.images[j];            if (uno.collision(otro))            {               uno.afterCollision(otro);               otro.afterCollision(uno);            }         }      }      /* Dibujo las entidades */      for (i = 0; i < stage.images.length;      i ++ )      {         stage.images[i].draw(bufferCtx, dt);      }      // copy the back buffer to the displayed canvas      ctx.drawImage(buffer, 0, 0);   }   this.registerKeyPressDown = function(event, images)   {      for (var x = 0; x < images.length;      x ++ )      {         if (images[x].keyDown)         {            images[x].keyDown(event);         }      }   }   this.registerKeyPressUp = function(event, images)   {      for (var x = 0; x < images.length;      x ++ )      {         if (images[x].keyUp)         {            images[x].keyUp(event);         }      }   }   this.loadFirstStage = function()   {      var inS = new Entity(50, 50);      PLANO = new Plano(0, 0, WIDTH, HEIGHT, 900, 650,1);      PERSONAJE_PRINCIPAL = new Character("personaje.png", 50, 50, 9, 28, 42, 4, 7, 4, 3, 3, 50, 60, arrayPrincipal, inS);      // cargo las imagenes y objetos      var imageManager = new ImageManager().initImageManager();      imageManager.addImage(new Stage("layer0.png", 0, 0, 4, 900, 650, etapa2));      imageManager.addImage(new EntityImage("layer2.png", 0, 0, 1, WIDTH, HEIGHT, PLANO.x, PLANO.y, 3, 3, PLANO.wS, PLANO.hS));      imageManager.addImage(new EntityImageScrollChild("mar.png", 0, 0, 2, 900, 320, 2, 2, 1707, 320, EAST));      imageManager.addImage(new EntityImageChild("arboles.png", 0, 100, 3, 1707, 320));      imageManager.addImage(new Character("personaje.png", 50, 50, 9, 28, 42, 4, 7, 4, 3, 3, 50, 60, arrayPrincipal, inS));      var arrayRoad1 = [300, 600];      imageManager.addImage(new Enemy("enemy.png", 0, 50, 5, 48, 48, 1, 12, 4, 2, 2, 70, 70, arrayEnemy, arrayRoad1));      var arrayRoad2 = [50, 400];      imageManager.addImage(new Enemy("enemy.png", 0, 200, 6, 48, 48, 1, 12, 4, 2, 2, 70, 70, arrayEnemy, arrayRoad2));      var arrayRoad3 = [100, 500];      imageManager.addImage(new Enemy("enemy.png", 0, 300, 7, 48, 48, 1, 12, 4, 2, 2, 70, 70, arrayEnemy, arrayRoad3));      var arrayRoad4 = [600, 800];      imageManager.addImage(new Enemy("personaje.png", 0, 400, 8, 28, 42, 4, 7, 4, 4, 4, 70, 70, arrayPrincipal, arrayRoad4));      imageManager.addImage(new EntityImageChild("tunel.png", 820, 580, 11, 80, 70));      imageManager.addImage(new FpsCore(10, "rgb(255,255,255)"));      imageManager.sortImage();      return imageManager;   }      this.loadSecondStage = function()   {      limitStageX = WEST;      limitStageY = SOUTH;           var inS = new Entity(50, 580);      PLANO = new Plano(0, 50, WIDTH, HEIGHT, 900, 650,2);      PERSONAJE_PRINCIPAL = new Character("personaje.png", 50, 580, 9, 28, 42, 4, 7, 4, 3, 3, 50, 60, arrayPrincipal, inS);      // cargo las imagenes y objetos      var imageManager = new ImageManager().initImageManager();      imageManager.addImage(new Stage("layer0.png", 0, 0, 4, 900, 650, etapa3));      imageManager.addImage(new EntityImage("paisaje.png", 0, 0, 1, WIDTH, HEIGHT, PLANO.x, PLANO.y, 3, 3, PLANO.wS, PLANO.hS));            imageManager.addImage(new Character("personaje.png", 50, 530, 9, 28, 42, 4, 7, 4, 3, 3, 50, 60, arrayPrincipal, inS));      var arrayRoad1 = [300, 600];      imageManager.addImage(new Enemy("enemy.png", 0, 50, 5, 48, 48, 1, 12, 4, 2, 2, 70, 70, arrayEnemy, arrayRoad1));      var arrayRoad2 = [50, 400];      imageManager.addImage(new Enemy("enemy.png", 0, 200, 6, 48, 48, 1, 12, 4, 2, 2, 70, 70, arrayEnemy, arrayRoad2));      var arrayRoad3 = [100, 500];      imageManager.addImage(new Enemy("enemy.png", 0, 300, 7, 48, 48, 1, 12, 4, 2, 2, 70, 70, arrayEnemy, arrayRoad3));           //imageManager.addImage(new EntityImageChild("tunel.png", 820, 580, 11, 80, 70));      imageManager.addImage(new FpsCore(10, "rgb(255,255,255)"));      imageManager.sortImage();      return imageManager;   }}