var direction_scrolling = SOUTH;var action_character = CHARACTER_STILL;var limitStageX = NONE;var limitStageY = NONE;function GameManager(){   this.imageManager = null;   this.initGameManager = function()   {      // cargo las imagenes y objetos      gameManager = this;      this.imageManager = new ImageManager().initImageManager();      this.registerKeyPress();      // 		this.imageManager.addImage(new Stage("layer0.png", 0, 0, 5));      this.imageManager.addImage(new EntityImage("paisaje.png", 0, 150, 1, 600, 400, 0, 0, 5, 5, 900, 650, true, true, true));      //this.imageManager.addImage(new EntityImageScroll("mar.png", 0, 50, 2, 600, 320, 0, 0, 2, 2, 1707, 320, true, EAST));      //this.imageManager.addImage(new EntityImage("arboles.png", 0, 100, 3, 600, 320, 0, 0, 5, 5, 1707, 320, true, true, false));      this.imageManager.addImage(new Character("personaje.png", 300, 230, 4, 28, 42, 4, 7, 1, 5, 5, 600, 400, 48, 62, true, arrayPrincipal));      this.imageManager.addImage(new FpsCore(5, "rgb(255,255,255)"));      this.imageManager.sortImage();            this.imageManager2 = new ImageManager().initImageManager();      this.imageManager2.addImage(new EntityImage("layer1.png", 0, 0, 1, 600, 150, 100, 100, 5, 5, 900, 650, true, true, true));      // use setInterval to call the draw function      // setInterval(function(){gameManager.render(); }, SECONDS_BETWEEN_FRAMES);      setInterval(function()      {         gameManager.render();      }      , 1000 / 32);      //       this.render();      return this;   }   this.render = function()   {      // limpio los contextos canvas      bufferCtx.clearRect(0, 0, bufferCtx.width, bufferCtx.height);      ctx.clearRect(0, 0, canvas.width, canvas.height);//1° escenario      for (i = 0; i < this.imageManager2.images.length;      i ++ )      {         if (this.imageManager2.images[i].isUpdate)         {            this.imageManager2.images[i].update();         }      }      //direction_scrolling = NONE;      //action_character = CHARACTER_STILL;      for (i = 0; i < this.imageManager2.images.length;      i ++ )      {         this.imageManager2.images[i].draw(bufferCtx);      }            //2° escenario            for (i = 0; i < this.imageManager.images.length;      i ++ )      {         if (this.imageManager.images[i].isUpdate)         {            this.imageManager.images[i].update();         }      }      direction_scrolling = NONE;      action_character = CHARACTER_STILL;      for (i = 0; i < this.imageManager.images.length;      i ++ )      {         this.imageManager.images[i].draw(bufferCtx);      }            // copy the back buffer to the displayed canvas      ctx.drawImage(buffer, 0, 0);   }   this.registerKeyPress = function()   {      document.onkeydown = function (event)      {         var keyCode;         if (event == null)         {            keyCode = window.event.keyCode;         }         else         {            keyCode = event.keyCode;         }         switch (keyCode)         {               // left            case 37 :               // action when pressing left key               direction_scrolling = WEST;               action_character = CHARACTER_WALK_WEST;               break;               // up            case 38 :               // action when pressing up key               direction_scrolling = NORTH;               action_character = CHARACTER_WALK_NORTH;               break;               // right            case 39 :               // action when pressing right key               direction_scrolling = EAST;               action_character = CHARACTER_WALK_EAST;               break;               // down            case 40 :               // action when pressing down key               direction_scrolling = SOUTH;               action_character = CHARACTER_WALK_SOUTH;               break;            default :               break;         }      }   }}