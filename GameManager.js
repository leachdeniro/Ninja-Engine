/*var line ={   x : 300,   y : 200,   length : 50,   angle : 0};function Ball(x, y, r){   this.x = x;   this.y = y;   this.r = r;   this.vx = 0;   this.vy = 0;   Ball.all.push(this);}Ball.all = [];Ball.draw_all = function(ctx){   var i = Ball.all.length;   while (i -- )   {      Ball.all[i].draw(ctx);   }};Ball.prototype ={   draw : function(ctx)   {      ctx.save();      ctx.translate(this.x, this.y);      ctx.fillStyle = "#fb0";      ctx.beginPath();      ctx.arc(0, 0, this.r, 0, Math.PI * 2, true);      ctx.closePath();      ctx.fill();      ctx.restore();   }   ,   remove : function()   {      Ball.all.splice(Ball.all.indexOf(this), 1);   }};*/// this.imageManager = null;var stages = new StageManager();	function GameManager(){      this.stage = null;      this.initGameManager = function()   {      gameManager = this;	        PLANO = new Plano(0, 0, WIDTH, HEIGHT, 900, 650, 1);      PERSONAJE_PRINCIPAL = new Character("personaje.png", 50, 50, 9, 28, 42, 4, 7, 4, 80, 80, 50, 60, arrayPrincipal, new Entity(50, 50));            stages.addStage(loadEscenario(elements_s1, conectors_s1));      console.log("Se han cargado los elementos s1");      stages.addStage(loadEscenario(elements_s2, conectors_s2));      console.log("Se han cargado los elemento s2");            this.load = 0;      PLANO.numStage = 1;      PLANO.limitStageX = WEST;      PLANO.limitStageY = NORTH;      PLANO.changeStage = true;      this.stage = stages.getStage(PLANO.numStage-1);      setInterval(function()      {         gameManager.render();      }      , 1000 / MAXFPS);        //this.render();      return this;   }   this.render = function()   {      // calculate the time since the last frame      var thisFrame = new Date().getTime();      var dt = (thisFrame - this.lastFrame) / 1000;	  //var dt = (thisFrame - this.lastFrame);      this.lastFrame = thisFrame;      //dt = 1;      if (PLANO.changeStage)      {         var character = this.stage.findCharacter();         var imageZero = this.stage.findImageZero();         if (character.idNearStage > 0)         {            var idx = character.idNearStage - 100;            var configStage = this.stage.getNearStages(idx);            PLANO.setPlano(configStage.plano);            PERSONAJE_PRINCIPAL.setSimpleCharacter(configStage.character);            this.stage = stages.getStage(configStage.plano.numStage - 1);            this.stage.setCharacter(configStage.character);            this.stage.setImageZero(configStage.plano);            console.log("changeStage: " + character.idNearStage + "," + idx);         }         else         {            this.stage = stages.getStage(PLANO.numStage - 1);         }         this.registerKeyPress(this.stage.images);         PLANO.changeStage = false;      }      else      {         this.stage = stages.getStage(PLANO.numStage - 1);      }	  	  if (this.stage.newEntities()){	     //console.log("newEntities");	     this.stage.pushOverEntities();	  }      // limpio los contextos canvas      bufferCtx.clearRect(0, 0, bufferCtx.width, bufferCtx.height);      ctx.clearRect(0, 0, canvas.width, canvas.height);      /* Actualizo los datos de las entidades */      for (i = 0; i < this.stage.images.length;      i ++ )      {         if (this.stage.images[i].update)         {            this.stage.images[i].update(dt);         }      }      /* Colisiones */      for(var i = 0; i < this.stage.images.length - 1;      i ++ )      {         for(var j = i + 1; j < this.stage.images.length;         j ++ )         {            var uno = this.stage.images[i];            var otro = this.stage.images[j];			//console.log(this.stage.images.length  + "," + i + "," +j);			if (uno.collision){				if (uno.collision(otro))				{					uno.afterCollision(otro);					otro.afterCollision(uno);				}			} else {                var hola =1;						}         }      }      /* Dibujo las entidades */      for (i = 0; i < this.stage.images.length;      i ++ )      {         this.stage.images[i].draw(bufferCtx, dt);      }      //this.physics(bufferCtx);      // copy the back buffer to the displayed canvas      ctx.drawImage(buffer, 0, 0);	  	  //Elimino las entidades marcadas para eliminar	  this.stage.removeDeletesEntities();   }   this.registerKeyPressDown = function(event, images)   {      for (var x = 0; x < images.length;      x ++ )      {         if (images[x].keyDown)         {            images[x].keyDown(event);         }      }   }   this.registerKeyPressUp = function(event, images)   {      for (var x = 0; x < images.length;      x ++ )      {         if (images[x].keyUp)         {            images[x].keyUp(event);         }      }   }   this.registerKeyPress = function(images)   {      // Registro los eventos de teclado      gameManager = this;      document.onkeydown = function(event)      {         gameManager.registerKeyPressDown(event, images);      }      document.onkeyup = function(event)      {         gameManager.registerKeyPressUp(event, images);      }      this.load = PLANO.numStage;   }  /* this.physics = function(ctx)   {      // Update angle - with geometry ! = )      line.angle += (Math.PI * 2) / 300;      var x = line.x + line.length * Math.cos(line.angle);      var y = line.y + line.length * Math.sin(line.angle);      // Update balls - with physics ! = )      if (Ball.all.length < 1000)      {         for (var i = 0; i < 5; i ++ )         {            var ball = new Ball(x, y, 2);            var random_offset = Math.random() * 1 - .5;            var speed = Math.random() * 15 + 3;            ball.vx = speed * Math.cos(line.angle + random_offset);            ball.vy = speed * Math.sin(line.angle + random_offset);         }      }      var i = Ball.all.length;      while(i -- )      {         var ball = Ball.all[i];         ball.x += ball.vx;         ball.y += ball.vy;         ball.vy += .1;         ball.vx *= .999;         ball.vy *= .99;         if (ball.x % canvas.width !== ball.x)         {            ball.remove();         }         else if (ball.y >= canvas.height)         {            ball.vy = - Math.abs(ball.vy);            ball.vy *= .7;            if (Math.abs(ball.vy) < 1 && Math.abs(ball.vx) < 1)            {               ball.remove();            }         }      }      // Draw line      ctx.save();      ctx.strokeStyle = "#fff";      ctx.lineWidth = 3;      ctx.beginPath();      ctx.moveTo(line.x, line.y);      ctx.lineTo(x, y);      ctx.stroke();      ctx.restore();      // Draw balls      Ball.draw_all(ctx);   }*/}